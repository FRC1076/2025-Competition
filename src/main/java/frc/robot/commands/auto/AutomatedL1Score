// Copyright (c) FRC 1076 PiHi Samurai
// You may use, distribute, and modify this software under the terms of
// the license found in the root directory of this project

package frc.robot.commands.drive;

import frc.robot.subsystems.drive.DriveSubsystem;
import frc.robot.Constants.DriveConstants.PathPlannerConstants;

import lib.utils.GeometryUtils;

import java.util.List;
import java.util.function.BooleanSupplier;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Commands;

import com.pathplanner.lib.auto.AutoBuilder;
import com.pathplanner.lib.path.GoalEndState;
import com.pathplanner.lib.path.IdealStartingState;
import com.pathplanner.lib.path.PathPlannerPath;
import com.pathplanner.lib.path.Waypoint;

/** This automatically drives to a pose without using A* to generate a trajectory, 
  * useful for when we know there are no obstructions on the field between the robot 
  * and the desired pose */
public class AutomatedL1Score extends Command {

    private final DriveSubsystem m_drive;
    private final SuperStructure superstructure;
    private final boolean hasCoral;
    private Command autoScoreCommand;

    public AutomatedL1Score(DriveSubsystem drive, SuperStructure superstructure, boolean hasCoral) {
        this.m_drive = drive;
        this.superstructure = superstructure;
        this.hasCoral = hasCoral;
        this.autoScoreCommand = Commands.none();
    }

    @Override
    public void initialize() {
        Pose2d currentPose = m_drive.getPose();
        Pose2d scorePose = Localization.getClosestReefFace(currentPose).;
        // Localization.getNextL1Position(currentPose);

        if (this.hasCoral) {
            autoScoreCommand = 
                Commands.sequence(
                    // Drive to score location
                    Commands.parallel(
                        // Set grabber state to L1
                        // Wait 0.5 seconds
                    )
                )
        } else {
            autoScoreCommand = 
                Commands.sequence(
                    Commands.parallel(
                        // Drive to coral station
                        // Grabber intake
                    ),
                    // Drive to score location
                    Commands.parallel(
                        // Set grabber state to L1
                        // Wait 0.5 seconds
                    )
                );

        autoScoreCommand.schedule();
        }
    }

    @Override
    public void execute(){
        //System.out.println(followPathCommand.isScheduled());
    }
    
    @Override
    public boolean isFinished() {
        return autoScoreCommand.isFinished();
    }
    
    @Override
    public void end(boolean interrupted) {
        autoScoreCommand.cancel();
    }
}